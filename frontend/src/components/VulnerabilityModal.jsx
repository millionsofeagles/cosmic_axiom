import React from 'react';
import { 
  XMarkIcon, 
  ExclamationTriangleIcon,
  ShieldExclamationIcon,
  ClockIcon,
  LinkIcon,
  TagIcon,
  ServerIcon,
  InformationCircleIcon
} from '@heroicons/react/24/outline';

const VulnerabilityModal = ({ vulnerability, isOpen, onClose }) => {
  if (!isOpen || !vulnerability) return null;

  const getSeverityColor = (severity) => {
    switch (severity?.toUpperCase()) {
      case 'CRITICAL':
        return 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200';
      case 'HIGH':
        return 'bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-200';
      case 'MEDIUM':
      case 'MODERATE':
        return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200';
      case 'LOW':
        return 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200';
      default:
        return 'bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-200';
    }
  };

  const getSourceIcon = (source) => {
    switch (source) {
      case 'NVD':
        return <ShieldExclamationIcon className="h-5 w-5" />;
      case 'CIRCL':
        return <InformationCircleIcon className="h-5 w-5" />;
      case 'CISA KEV':
        return <ExclamationTriangleIcon className="h-5 w-5" />;
      case 'GitHub Advisory':
        return <TagIcon className="h-5 w-5" />;
      case 'Microsoft':
        return <ServerIcon className="h-5 w-5" />;
      default:
        return <InformationCircleIcon className="h-5 w-5" />;
    }
  };

  const formatDate = (dateString) => {
    if (!dateString) return 'N/A';
    try {
      return new Date(dateString).toLocaleDateString('en-US', {
        year: 'numeric',
        month: 'long',
        day: 'numeric'
      });
    } catch {
      return 'Invalid Date';
    }
  };

  const renderSourceSpecificInfo = () => {
    switch (vulnerability.source) {
      case 'NVD':
        return (
          <div className="space-y-4">
            <div>
              <h4 className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">CVSS Metrics</h4>
              <div className="grid grid-cols-2 gap-4">
                <div className="bg-gray-50 dark:bg-gray-700 p-3 rounded-lg">
                  <div className="text-xs text-gray-500 dark:text-gray-400">Base Score</div>
                  <div className="text-lg font-semibold text-gray-900 dark:text-gray-100">{vulnerability.score || 'N/A'}</div>
                </div>
                <div className="bg-gray-50 dark:bg-gray-700 p-3 rounded-lg">
                  <div className="text-xs text-gray-500 dark:text-gray-400">Severity</div>
                  <div className={`inline-flex px-2 py-1 text-xs font-medium rounded-full ${getSeverityColor(vulnerability.severity)}`}>
                    {vulnerability.severity || 'Unknown'}
                  </div>
                </div>
              </div>
            </div>
          </div>
        );

      case 'CISA KEV':
        return (
          <div className="space-y-4">
            <div className="bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg p-4">
              <div className="flex items-center mb-2">
                <ExclamationTriangleIcon className="h-5 w-5 text-red-600 dark:text-red-400 mr-2" />
                <h4 className="text-sm font-medium text-red-800 dark:text-red-200">Actively Exploited</h4>
              </div>
              <p className="text-sm text-red-700 dark:text-red-300">
                This vulnerability is in CISA's Known Exploited Vulnerabilities catalog, meaning it has been actively exploited in the wild.
              </p>
            </div>
            {vulnerability.additionalInfo && (
              <div className="grid grid-cols-1 gap-4">
                {vulnerability.additionalInfo.dueDate && (
                  <div>
                    <h4 className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Due Date for Remediation</h4>
                    <p className="text-sm text-gray-600 dark:text-gray-400">{formatDate(vulnerability.additionalInfo.dueDate)}</p>
                  </div>
                )}
                {vulnerability.additionalInfo.requiredAction && (
                  <div>
                    <h4 className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Required Action</h4>
                    <p className="text-sm text-gray-600 dark:text-gray-400">{vulnerability.additionalInfo.requiredAction}</p>
                  </div>
                )}
              </div>
            )}
          </div>
        );

      case 'GitHub Advisory':
        return (
          <div className="space-y-4">
            <div className="bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg p-4">
              <div className="flex items-center mb-2">
                <TagIcon className="h-5 w-5 text-blue-600 dark:text-blue-400 mr-2" />
                <h4 className="text-sm font-medium text-blue-800 dark:text-blue-200">GitHub Security Advisory</h4>
              </div>
              <p className="text-sm text-blue-700 dark:text-blue-300">
                This vulnerability was reviewed and published by GitHub's security team.
              </p>
            </div>
          </div>
        );

      case 'Microsoft':
        return (
          <div className="space-y-4">
            <div className="bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg p-4">
              <div className="flex items-center mb-2">
                <ServerIcon className="h-5 w-5 text-blue-600 dark:text-blue-400 mr-2" />
                <h4 className="text-sm font-medium text-blue-800 dark:text-blue-200">Microsoft Security Response Center</h4>
              </div>
              <p className="text-sm text-blue-700 dark:text-blue-300">
                This vulnerability is tracked by Microsoft's Security Response Center and affects Microsoft products.
              </p>
            </div>
          </div>
        );

      case 'CIRCL':
        return (
          <div className="space-y-4">
            <div className="bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-800 rounded-lg p-4">
              <div className="flex items-center mb-2">
                <InformationCircleIcon className="h-5 w-5 text-green-600 dark:text-green-400 mr-2" />
                <h4 className="text-sm font-medium text-green-800 dark:text-green-200">CIRCL CVE Database</h4>
              </div>
              <p className="text-sm text-green-700 dark:text-green-300">
                This vulnerability information is provided by CIRCL (Computer Incident Response Center Luxembourg).
              </p>
            </div>
          </div>
        );

      default:
        return null;
    }
  };

  return (
    <div className="fixed inset-0 z-50 overflow-y-auto">
      <div className="flex items-center justify-center min-h-screen px-4 pt-4 pb-20 text-center sm:p-0">
        {/* Backdrop */}
        <div 
          className="fixed inset-0 bg-gray-500 bg-opacity-75 dark:bg-gray-900 dark:bg-opacity-75 transition-opacity"
          onClick={onClose}
        />
        
        {/* Modal */}
        <div className="inline-block w-full max-w-4xl px-6 py-4 my-8 overflow-hidden text-left align-middle transition-all transform bg-white dark:bg-gray-800 shadow-xl rounded-lg">
          {/* Header */}
          <div className="flex items-center justify-between pb-4 border-b border-gray-200 dark:border-gray-700">
            <div className="flex items-center space-x-3">
              {getSourceIcon(vulnerability.source)}
              <div>
                <h3 className="text-lg font-medium text-gray-900 dark:text-gray-100">
                  {vulnerability.id}
                </h3>
                <p className="text-sm text-gray-500 dark:text-gray-400">
                  {vulnerability.source} â€¢ {formatDate(vulnerability.published)}
                </p>
              </div>
            </div>
            <button
              onClick={onClose}
              className="p-2 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-700"
            >
              <XMarkIcon className="h-5 w-5" />
            </button>
          </div>

          {/* Content */}
          <div className="pt-4 space-y-6">
            {/* Description */}
            <div>
              <h4 className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Description</h4>
              <p className="text-sm text-gray-600 dark:text-gray-400 leading-relaxed">
                {vulnerability.description}
              </p>
            </div>

            {/* Severity and Score */}
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <div>
                <h4 className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Severity</h4>
                <span className={`inline-flex px-3 py-1 text-sm font-medium rounded-full ${getSeverityColor(vulnerability.severity)}`}>
                  {vulnerability.severity || 'Unknown'}
                </span>
              </div>
              <div>
                <h4 className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">CVSS Score</h4>
                <p className="text-lg font-semibold text-gray-900 dark:text-gray-100">
                  {vulnerability.score || 'N/A'}
                </p>
              </div>
              <div>
                <h4 className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">CWE IDs</h4>
                <p className="text-sm text-gray-600 dark:text-gray-400">
                  {vulnerability.cweIds || 'Unknown'}
                </p>
              </div>
            </div>

            {/* Affected Products */}
            {vulnerability.affectedProducts && vulnerability.affectedProducts.length > 0 && (
              <div>
                <h4 className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Affected Products</h4>
                <div className="flex flex-wrap gap-2">
                  {vulnerability.affectedProducts.map((product, index) => (
                    <span
                      key={index}
                      className="inline-flex px-2 py-1 text-xs font-medium text-gray-700 dark:text-gray-300 bg-gray-100 dark:bg-gray-700 rounded-md"
                    >
                      {product}
                    </span>
                  ))}
                </div>
              </div>
            )}

            {/* Source-specific information */}
            {renderSourceSpecificInfo()}

            {/* Timeline */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <h4 className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-2 flex items-center">
                  <ClockIcon className="h-4 w-4 mr-1" />
                  Published
                </h4>
                <p className="text-sm text-gray-600 dark:text-gray-400">
                  {formatDate(vulnerability.published)}
                </p>
              </div>
              <div>
                <h4 className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-2 flex items-center">
                  <ClockIcon className="h-4 w-4 mr-1" />
                  Last Modified
                </h4>
                <p className="text-sm text-gray-600 dark:text-gray-400">
                  {formatDate(vulnerability.lastModified)}
                </p>
              </div>
            </div>

            {/* References */}
            {vulnerability.references && vulnerability.references.length > 0 && (
              <div>
                <h4 className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-2 flex items-center">
                  <LinkIcon className="h-4 w-4 mr-1" />
                  References
                </h4>
                <div className="space-y-2">
                  {vulnerability.references.map((ref, index) => (
                    <a
                      key={index}
                      href={ref.url}
                      target="_blank"
                      rel="noopener noreferrer"
                      className="block text-sm text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300 break-all"
                    >
                      {ref.url}
                    </a>
                  ))}
                </div>
              </div>
            )}
          </div>

          {/* Footer */}
          <div className="pt-6 mt-6 border-t border-gray-200 dark:border-gray-700">
            <div className="flex justify-end">
              <button
                onClick={onClose}
                className="px-4 py-2 text-sm font-medium text-gray-700 dark:text-gray-300 bg-gray-100 dark:bg-gray-700 hover:bg-gray-200 dark:hover:bg-gray-600 rounded-lg transition-colors"
              >
                Close
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default VulnerabilityModal;